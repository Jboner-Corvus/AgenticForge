{"version":3,"file":"validationUtils.js","sourceRoot":"","sources":["validationUtils.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAE/B,OAAO,MAAM,MAAM,cAAc,CAAC,CAAC,+CAA+C;AAElF;;;;;GAKG;AACH,MAAM,UAAU,cAAc,CAC5B,SAAoC,EACpC,OAAgB;IAEhB,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;QAC/B,IAAI,GAAG,CAAC,QAAQ,KAAK,OAAO,IAAI,GAAG,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC;YAC1D,IAAI,OAAO,EAAE,CAAC;gBACZ,MAAM,CAAC,IAAI,CACT,EAAE,OAAO,EAAE,MAAM,EAAE,wBAAwB,EAAE,GAAG,EAAE,SAAS,EAAE,EAC7D,qEAAqE,CACtE,CAAC;YACJ,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,IAAI,OAAO,EAAE,CAAC;YACZ,MAAM,CAAC,IAAI,CACT,EAAE,OAAO,EAAE,KAAK,EAAG,CAAW,CAAC,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,EACxD,gCAAgC,CACjC,CAAC;QACJ,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC;AAED,MAAM,UAAU,cAAc,CAC5B,MAA0B,EAC1B,cAAkC;IAElC,IAAI,CAAC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC/B,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,MAAM,KAAK,cAAc,CAAC;AACnC,CAAC;AAED,MAAM,UAAU,eAAe,CAC7B,OAAe,EACf,SAAiB,EACjB,MAAc;IAEd,0EAA0E;IAC1E,iEAAiE;IACjE,OAAO,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,MAAM,CAAC;AAC9C,CAAC","sourcesContent":["// src/utils/validationUtils.ts\n\nimport logger from '../logger.js'; // Pour la journalisation interne si nécessaire\n\n/**\n * Valide si une chaîne de caractères est une URL HTTP/HTTPS valide.\n * @param urlString La chaîne à valider.\n * @param context Un contexte optionnel pour la journalisation (ex: nom de la fonction appelante).\n * @returns `true` si l'URL est valide, `false` sinon.\n */\nexport function isValidHttpUrl(\n  urlString: null | string | undefined,\n  context?: string,\n): boolean {\n  if (!urlString) {\n    return false;\n  }\n  try {\n    const url = new URL(urlString);\n    if (url.protocol !== 'http:' && url.protocol !== 'https:') {\n      if (context) {\n        logger.warn(\n          { context, reason: 'Protocole non supporté', url: urlString },\n          \"Tentative d'utilisation d'une URL avec un protocole non HTTP/HTTPS.\",\n        );\n      }\n      return false;\n    }\n    return true;\n  } catch (e) {\n    if (context) {\n      logger.warn(\n        { context, error: (e as Error).message, url: urlString },\n        \"Format d'URL invalide détecté.\",\n      );\n    }\n    return false;\n  }\n}\n\nexport function validateApiKey(\n  apiKey: string | undefined,\n  expectedApiKey: string | undefined,\n): boolean {\n  if (!apiKey || !expectedApiKey) {\n    return false;\n  }\n  return apiKey === expectedApiKey;\n}\n\nexport function validateWebhook(\n  payload: string,\n  signature: string,\n  secret: string,\n): boolean {\n  // This is a placeholder. Real validation would involve HMAC verification.\n  // For now, we'll just check if signature and secret are present.\n  return !!payload && !!signature && !!secret;\n}\n"]}