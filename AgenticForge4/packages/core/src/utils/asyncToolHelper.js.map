{"version":3,"file":"asyncToolHelper.js","sourceRoot":"","sources":["asyncToolHelper.ts"],"names":[],"mappings":"AAEA,0DAA0D;AAC1D,OAAO,MAAM,MAAM,cAAc,CAAC;AAClC,OAAO,EAA4B,QAAQ,IAAI,SAAS,EAAE,MAAM,aAAa,CAAC;AAC9E,OAAO,EACL,gBAAgB,EAEhB,aAAa,GACd,MAAM,iBAAiB,CAAC;AAqBzB,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,IAA4B;IAE5B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;IACvD,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC;QACvB,KAAK,EAAE,CAAC,CAAC,KAAK;QACd,QAAQ,EAAE,IAAI,EAAE,QAAQ;QACxB,IAAI,EAAE,eAAe;QACrB,MAAM;QACN,IAAI,EAAE,QAAQ;KACf,CAAC,CAAC;IACH,MAAM,OAAO,GAAiC;QAC5C,IAAI;QACJ,KAAK;QACL,MAAM;QACN,MAAM;QACN,QAAQ;KACT,CAAC;IACF,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;QACtE,GAAG,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,oCAAoC,CAAC,CAAC;QAClE,OAAO,GAAG,CAAC,EAAE,CAAC;IAChB,CAAC;IAAC,OAAO,KAAc,EAAE,CAAC;QACxB,MAAM,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;QACxC,GAAG,CAAC,KAAK,CAAC,mDAAmD,EAAE;YAC7D,GAAG,EAAE,UAAU;SAChB,CAAC,CAAC;QACH,MAAM,IAAI,gBAAgB,CACxB,uBAAuB,MAAM,SAAS,QAAQ,mCAAmC,UAAU,CAAC,OAAO,EAAE,EACrG,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,CAChD,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["import type { SessionData } from '../types.js';\n\n// src/utils/asyncToolHelper.ts (Corrigé pour SessionData)\nimport logger from '../logger.js';\nimport { type AsyncTaskJobPayload, jobQueue as taskQueue } from '../queue.js';\nimport {\n  EnqueueTaskError,\n  type ErrorDetails,\n  getErrDetails,\n} from './errorUtils.js';\n\nexport interface EnqueueParams<TParams> {\n  auth: SessionData | undefined;\n  cbUrl?: string;\n  params: TParams;\n  taskId: string;\n  toolName: string;\n}\n\nexport interface TaskOutcome<TParams, TResult> {\n  error?: ErrorDetails;\n  inParams: TParams;\n  msg: string;\n  progress?: { current: number; total: number; unit?: string };\n  result?: TResult;\n  status: 'completed' | 'error' | 'processing';\n  taskId: string;\n  ts: string;\n}\n\nexport async function enqueueTask<TParams extends Record<string, unknown>>(\n  args: EnqueueParams<TParams>,\n): Promise<string | undefined> {\n  const { auth, cbUrl, params, taskId, toolName } = args;\n  const log = logger.child({\n    cbUrl: !!cbUrl,\n    clientIp: auth?.clientIp,\n    proc: 'task-producer',\n    taskId,\n    tool: toolName,\n  });\n  const jobData: AsyncTaskJobPayload<TParams> = {\n    auth,\n    cbUrl,\n    params,\n    taskId,\n    toolName,\n  };\n  try {\n    const job = await taskQueue.add(toolName, jobData, { jobId: taskId });\n    log.info({ jobId: job.id }, \"Tâche ajoutée à la file d'attente.\");\n    return job.id;\n  } catch (error: unknown) {\n    const errDetails = getErrDetails(error);\n    log.error(\"Échec de l'ajout de la tâche à la file d'attente.\", {\n      err: errDetails,\n    });\n    throw new EnqueueTaskError(\n      `L'ajout de la tâche ${taskId} pour ${toolName} à la file d'attente a échoué : ${errDetails.message}`,\n      { originalError: errDetails, taskId, toolName },\n    );\n  }\n}\n"]}