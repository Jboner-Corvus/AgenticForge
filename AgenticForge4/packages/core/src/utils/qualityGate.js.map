{"version":3,"file":"qualityGate.js","sourceRoot":"","sources":["qualityGate.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,IAAI,EAAE,EAAE,MAAM,IAAI,CAAC;AACpC,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AACtC,OAAO,MAAM,MAAM,cAAc,CAAC;AAClC,2BAA2B;AAC3B,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAElD,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,CAAC,2CAA2C;AACvF,MAAM,UAAU,GAAG;IACjB,MAAM,EAAE,MAAM,CAAC,iBAAiB,IAAI,OAAO,CAAC,GAAG,EAAE;IACjD,MAAM,EAAE,cAAc;IACtB,IAAI,EAAE,MAAe;CACtB,CAAC;AAOF;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,cAAc;IAClC,MAAM,cAAc,GAAa,EAAE,CAAC;IAEpC,iFAAiF;IACjF,MAAM,cAAc,GAAG;QACrB,IAAI;QACJ,IAAI;QACJ;;;;;;;;;;;;;KAaC;KACF,CAAC;IAEF,MAAM,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;IACjE,cAAc,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;IAEpD,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,iBAAiB,EAAE,cAAc,EAAE;QACnE,MAAM,EAAE,CAAC,UAAU,CAAC;QACpB,UAAU,EAAE,cAAc;KAC3B,CAAC,CAAC;IAEH,cAAc,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;IAC1D,cAAc,CAAC,IAAI,CAAC,cAAc,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;IACrD,IAAI,MAAM,CAAC,MAAM;QAAE,cAAc,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;IACpE,IAAI,MAAM,CAAC,MAAM;QAAE,cAAc,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;IAEpE,oEAAoE;IACpE,MAAM,eAAe,GAAG,MAAM,CAAC,QAAQ,KAAK,CAAC,CAAC;IAE9C,IAAI,eAAe,EAAE,CAAC;QACpB,cAAc,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QACrD,MAAM,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;IACzD,CAAC;SAAM,CAAC;QACN,MAAM,cAAc,GAAG,sCAAsC,MAAM,CAAC,QAAQ,GAAG,CAAC;QAChF,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACpC,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE;YAC3B,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,MAAM,EAAE,MAAM,CAAC,MAAM;SACtB,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,MAAM,EAAE,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;QACjC,OAAO,EAAE,eAAe;KACzB,CAAC;AACJ,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB,CACzC,gBAAwB;IAExB,MAAM,cAAc,GAAa,EAAE,CAAC;IACpC,MAAM,gBAAgB,GAAG,kBAAkB,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC;IAC3D,MAAM,yBAAyB,GAAG,0BAA0B,gBAAgB,EAAE,CAAC;IAC/E,MAAM,sBAAsB,GAAG,IAAI,CAAC,IAAI,CACtC,UAAU,CAAC,MAAM,EACjB,WAAW,EACX,gBAAgB,CACjB,CAAC;IAEF,MAAM,yBAAyB,GAAG,IAAI,CAAC,QAAQ,CAC7C,UAAU,CAAC,MAAM,EACjB,gBAAgB,CACjB,CAAC;IAEF,uCAAuC;IACvC,MAAM,iBAAiB,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCzB,CAAC;IAEF,MAAM,CAAC,IAAI,CAAC,kCAAkC,gBAAgB,EAAE,CAAC,CAAC;IAClE,cAAc,CAAC,IAAI,CACjB,6BAA6B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CACnE,CAAC;IAEF,IAAI,CAAC;QACH,gCAAgC;QAChC,MAAM,EAAE,CAAC,SAAS,CAAC,sBAAsB,EAAE,iBAAiB,CAAC,CAAC;QAE9D,MAAM,OAAO,GAAG;YACd,MAAM;YACN,yBAAyB;YACzB,yBAAyB;SAC1B,CAAC;QAEF,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,iBAAiB,EAAE,OAAO,EAAE;YAC5D,MAAM,EAAE,CAAC,UAAU,CAAC;YACpB,UAAU,EAAE,cAAc;SAC3B,CAAC,CAAC;QAEH,cAAc,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QAC1D,cAAc,CAAC,IAAI,CAAC,cAAc,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QACrD,IAAI,MAAM,CAAC,MAAM;YAAE,cAAc,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;QACpE,IAAI,MAAM,CAAC,MAAM;YAAE,cAAc,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;QAEpE,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,KAAK,CAAC,CAAC;QACtC,IAAI,OAAO,EAAE,CAAC;YACZ,cAAc,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;YAClD,MAAM,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAC1E,CAAC;aAAM,CAAC;YACN,MAAM,cAAc,GAAG,iBAAiB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,0BAA0B,MAAM,CAAC,QAAQ,GAAG,CAAC;YACpH,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE;gBAC3B,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,MAAM,EAAE,MAAM,CAAC,MAAM;aACtB,CAAC,CAAC;QACL,CAAC;QACD,OAAO,EAAE,MAAM,EAAE,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC;IACxD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,gCAAgC,CAAC,CAAC;QAC/D,cAAc,CAAC,IAAI,CAAC,mCAAmC,KAAK,EAAE,CAAC,CAAC;QAChE,OAAO,EAAE,MAAM,EAAE,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;IAC/D,CAAC;YAAS,CAAC;QACT,mCAAmC;QACnC,IAAI,CAAC;YACH,MAAM,EAAE,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;YACxC,MAAM,CAAC,KAAK,CACV,wCAAwC,sBAAsB,EAAE,CACjE,CAAC;QACJ,CAAC;QAAC,OAAO,YAAY,EAAE,CAAC;YACtB,MAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,YAAY,EAAE,EACrB,4CAA4C,CAC7C,CAAC;QACJ,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import { promises as fs } from 'fs';\nimport path from 'path';\n\nimport { config } from '../config.js';\nimport logger from '../logger.js';\n// src/utils/qualityGate.ts\nimport { runInSandbox } from './dockerManager.js';\n\nconst DEV_SANDBOX_IMAGE = 'node:24-alpine'; // CORRECTION: Passage de node:20 à node:24\nconst mountPoint = {\n  Source: config.HOST_PROJECT_PATH || process.cwd(),\n  Target: '/usr/src/app',\n  Type: 'bind' as const,\n};\n\ninterface QualityResult {\n  output: string;\n  success: boolean;\n}\n\n/**\n * Exécute une série de vérifications de qualité (types, format, lint) dans un sandbox Docker.\n * @returns Un objet indiquant si toutes les vérifications ont réussi et la sortie combinée.\n */\nexport async function runQualityGate(): Promise<QualityResult> {\n  const outputMessages: string[] = [];\n\n  // CORRECTION: Ajout de 'set -e' pour que le script s'arrête à la première erreur\n  const qualityCommand = [\n    'sh',\n    '-c',\n    `\n      set -e \n      echo \"--- Installing pnpm...\"\n      npm install -g pnpm\n      \n      echo \"\\n--- Running: Lint (Fix)...\"\n      pnpm run lint:fix\n      \n      echo \"\\n--- Running: Format...\"\n      pnpm run format\n      \n      echo \"\\n--- Running: Type Check...\"\n      pnpm exec tsc --noEmit\n    `,\n  ];\n\n  logger.info('Running all quality checks in a single sandbox...');\n  outputMessages.push(`--- Running Quality Gate ---`);\n\n  const result = await runInSandbox(DEV_SANDBOX_IMAGE, qualityCommand, {\n    mounts: [mountPoint],\n    workingDir: '/usr/src/app',\n  });\n\n  outputMessages.push(`--- Sandbox Execution Finished ---`);\n  outputMessages.push(`Exit Code: ${result.exitCode}`);\n  if (result.stdout) outputMessages.push(`STDOUT:\\n${result.stdout}`);\n  if (result.stderr) outputMessages.push(`STDERR:\\n${result.stderr}`);\n\n  // La vérification du succès est maintenant fiable grâce au 'set -e'\n  const allChecksPassed = result.exitCode === 0;\n\n  if (allChecksPassed) {\n    outputMessages.push('\\n--- Quality Gate Passed ---');\n    logger.info('All quality checks passed successfully.');\n  } else {\n    const failureMessage = `Quality Gate FAILED with exit code ${result.exitCode}.`;\n    outputMessages.push(failureMessage);\n    logger.error(failureMessage, {\n      stderr: result.stderr,\n      stdout: result.stdout,\n    });\n  }\n\n  return {\n    output: outputMessages.join('\\n'),\n    success: allChecksPassed,\n  };\n}\n\n/**\n * Exécute un test simple pour un outil donné dans un sandbox Docker.\n * Tente d'importer l'outil et d'appeler sa méthode `execute`.\n * @param toolAbsolutePath - Le chemin absolu du fichier de l'outil à tester.\n * @returns Un objet indiquant si le test a réussi et la sortie combinée.\n */\nexport async function runToolTestsInSandbox(\n  toolAbsolutePath: string,\n): Promise<QualityResult> {\n  const outputMessages: string[] = [];\n  const tempTestFileName = `temp_tool_test_${Date.now()}.js`;\n  const tempTestFilePathInSandbox = `/usr/src/app/workspace/${tempTestFileName}`;\n  const tempTestFilePathOnHost = path.join(\n    mountPoint.Source,\n    'workspace',\n    tempTestFileName,\n  );\n\n  const toolRelativePathInSandbox = path.relative(\n    mountPoint.Target,\n    toolAbsolutePath,\n  );\n\n  // Content of the temporary test script\n  const testScriptContent = `\n    import { fileURLToPath } from 'url';\n    import path from 'path';\n\n    const toolPath = process.argv[2];\n    \n    async function runTest() {\n      try {\n        const module = await import(toolPath);\n        let toolFound = false;\n        for (const exportName in module) {\n          const exportedItem = module[exportName];\n          if (\n            exportedItem &&\n            typeof exportedItem === 'object' &&\n            'name' in exportedItem &&\n            'execute' in exportedItem\n          ) {\n            console.log('Attempting to execute tool: ' + exportedItem.name);\n            // Attempt to execute with an empty object, assuming tools can handle it or have optional parameters\n            await exportedItem.execute({}); \n            console.log('Tool ' + exportedItem.name + ' executed successfully.');\n            toolFound = true;\n            break;\n          }\n        }\n        if (!toolFound) {\n          console.error('Error: No valid tool found in ' + toolPath);\n          process.exit(1);\n        }\n        process.exit(0);\n      } catch (error) {\n        console.error('Error executing tool ' + toolPath + ':', error);\n        process.exit(1);\n      }\n    }\n\n    runTest();\n  `;\n\n  logger.info(`Running sandbox test for tool: ${toolAbsolutePath}`);\n  outputMessages.push(\n    `--- Running Tool Test for ${path.basename(toolAbsolutePath)} ---`,\n  );\n\n  try {\n    // Write the temporary test file\n    await fs.writeFile(tempTestFilePathOnHost, testScriptContent);\n\n    const command = [\n      'node',\n      tempTestFilePathInSandbox,\n      toolRelativePathInSandbox,\n    ];\n\n    const result = await runInSandbox(DEV_SANDBOX_IMAGE, command, {\n      mounts: [mountPoint],\n      workingDir: '/usr/src/app',\n    });\n\n    outputMessages.push(`--- Sandbox Execution Finished ---`);\n    outputMessages.push(`Exit Code: ${result.exitCode}`);\n    if (result.stdout) outputMessages.push(`STDOUT:\\n${result.stdout}`);\n    if (result.stderr) outputMessages.push(`STDERR:\\n${result.stderr}`);\n\n    const success = result.exitCode === 0;\n    if (success) {\n      outputMessages.push('\\n--- Tool Test Passed ---');\n      logger.info(`Tool test for ${path.basename(toolAbsolutePath)} passed.`);\n    } else {\n      const failureMessage = `Tool test for ${path.basename(toolAbsolutePath)} FAILED with exit code ${result.exitCode}.`;\n      outputMessages.push(failureMessage);\n      logger.error(failureMessage, {\n        stderr: result.stderr,\n        stdout: result.stdout,\n      });\n    }\n    return { output: outputMessages.join('\\n'), success };\n  } catch (error) {\n    logger.error({ err: error }, 'Error during tool sandbox test');\n    outputMessages.push(`Error during tool sandbox test: ${error}`);\n    return { output: outputMessages.join('\\n'), success: false };\n  } finally {\n    // Clean up the temporary test file\n    try {\n      await fs.unlink(tempTestFilePathOnHost);\n      logger.debug(\n        `Cleaned up temporary tool test file: ${tempTestFilePathOnHost}`,\n      );\n    } catch (cleanupError) {\n      logger.error(\n        { err: cleanupError },\n        'Error cleaning up temporary tool test file',\n      );\n    }\n  }\n}\n"]}