#!/usr/bin/env node

const redis = require('redis');

async function cleanupLLMKeys() {
    console.log('üßπ Nettoyage des cl√©s LLM dupliqu√©es dans Redis...');
    
    const client = redis.createClient({
        host: 'localhost',
        port: 6379
    });
    
    try {
        await client.connect();
        console.log('‚úÖ Connect√© √† Redis');
        
        // R√©cup√©rer toutes les cl√©s LLM
        const allKeys = await client.lRange('llmApiKeys', 0, -1);
        console.log(`üìã Nombre total d'entr√©es: ${allKeys.length}`);
        
        if (allKeys.length === 0) {
            console.log('‚ÑπÔ∏è Aucune cl√© trouv√©e');
            return;
        }
        
        // Analyser et d√©dupliquer
        const uniqueKeys = new Map();
        const seenKeys = new Set();
        
        for (const keyStr of allKeys) {
            try {
                const keyObj = JSON.parse(keyStr);
                const uniqueId = `${keyObj.apiProvider}-${keyObj.apiKey}-${keyObj.apiModel || 'default'}`;
                
                if (!seenKeys.has(uniqueId)) {
                    seenKeys.add(uniqueId);
                    uniqueKeys.set(uniqueId, keyObj);
                    console.log(`‚úÖ Cl√© unique trouv√©e: ${keyObj.apiProvider} (${keyObj.apiModel || 'default'})`);
                } else {
                    console.log(`üîÑ Duplicata ignor√©: ${keyObj.apiProvider} (${keyObj.apiModel || 'default'})`);
                }
            } catch (error) {
                console.error('‚ùå Erreur lors du parsing:', error.message);
            }
        }
        
        console.log(`\nüìä R√©sum√©:`);
        console.log(`   - Entr√©es avant: ${allKeys.length}`);
        console.log(`   - Entr√©es uniques: ${uniqueKeys.size}`);
        console.log(`   - Doublons supprim√©s: ${allKeys.length - uniqueKeys.size}`);
        
        if (uniqueKeys.size < allKeys.length) {
            console.log('\nüßπ Nettoyage en cours...');
            
            // Supprimer l'ancienne liste
            await client.del('llmApiKeys');
            console.log('üóëÔ∏è Ancienne liste supprim√©e');
            
            // Recr√©er avec les cl√©s uniques
            if (uniqueKeys.size > 0) {
                const uniqueKeyStrings = Array.from(uniqueKeys.values()).map(key => JSON.stringify(key));
                await client.lPush('llmApiKeys', ...uniqueKeyStrings);
                console.log(`‚úÖ Nouvelle liste cr√©√©e avec ${uniqueKeys.size} cl√©s uniques`);
            }
            
            // V√©rification
            const newCount = await client.lLen('llmApiKeys');
            console.log(`üîç V√©rification: ${newCount} cl√©s dans la nouvelle liste`);
        } else {
            console.log('‚ú® Aucun doublon trouv√© - Redis est d√©j√† propre !');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
    } finally {
        await client.quit();
        console.log('üëã D√©connect√© de Redis');
    }
}

// Ex√©cuter le nettoyage
cleanupLLMKeys().catch(console.error);