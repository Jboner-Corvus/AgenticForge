#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ==============================================================================
# üß™ PROC√âDURE DE TEST STANDARD POUR L'AGENT
# ==============================================================================
# ---
# Instructions :
# ---
#
# Ex√©cutez chaque commande ci-dessous, une par une, en utilisant ce script.
# Pour chaque commande :
#
# 1. Ex√©cutez la requ√™te via le script (ex: python3 exec_commande.py 1).
# 2. Consultez les logs du worker pour suivre l'ex√©cution de la t√¢che.
# 3. Confirmez que la t√¢che associ√©e au prompt a √©t√© re√ßue, qu'elle s'est
#    termin√©e avec succ√®s et qu'elle a bien effectu√© son action.
# 4. Corrigez le code si la t√¢che ne fonctionne pas.
# 5. Cochez la case `[x]` dans votre liste de suivi seulement quand la t√¢che
#    est termin√©e avec succ√®s.
#
# ==============================================================================
# GUIDE D'UTILISATION DU SCRIPT
# ==============================================================================
#
# Pour lancer une commande, utilisez la structure suivante dans votre terminal
# (CMD, PowerShell, etc.) :
#
#   python3 exec_commande.py <numero_de_la_commande>
#
# Remplacez :
#   - `exec_commande.py` par le nom de ce fichier.
#   - `<numero_de_la_commande>` par le num√©ro de la t√¢che √† ex√©cuter (de 1 √† 50).
#
# ---
# Exemples pratiques :
# ---
#
# 1. Pour lister les fichiers et dossiers (commande n¬∞1) :
#    python3 exec_commande.py 1
#
# 2. Pour cr√©er une archive du r√©pertoire de travail (commande n¬∞25) :
#    python3 exec_commande.py 25
#
# ==============================================================================

import subprocess
import sys
import json
import time
import shlex

# --- CONFIGURATION ---
# Mettez √† jour ces variables avec les v√¥tres
API_URL = "http://192.168.2.56:8080/api"
API_TOKEN = "Qp5brxkUkTbmWJHmdrGYUjfgNY1hT9WOxUmzpP77JU0"
POLL_INTERVAL = 2  # secondes
POLL_TIMEOUT = 60 # secondes

# Liste de tous les prompts √† tester. Le script s'occupe de construire la commande curl.
PROMPTS = [
    # 1-10 : Commandes de base (fichiers, shell, web, outils)
    "1. Liste tous les fichiers et dossiers dans le r√©pertoire de travail.",
    "2. Cr√©e un fichier nomm√© rapport.txt et √©cris dedans : Ceci est la premi√®re ligne.",
    "3. Lis le contenu du fichier rapport.txt.",
    "4. Dans rapport.txt, remplace premi√®re par seconde.",
    '5. Ex√©cute ce code Python et donne le r√©sultat : import sys; print(f"Version de Python: {sys.version}")',
    "6. Ex√©cute ls -la et montre la sortie.",
    "7. Fais une recherche web sur : derni√®res avanc√©es du mod√®le Llama 3.",
    "8. Navigue sur https://www.lemonde.fr et r√©sume les titres principaux.",
    "9. Quels sont tous les outils que tu peux utiliser ? Liste-les.",
    '10. Cr√©e un nouvel outil nomm√© dire_bonjour qui ne prend aucun param√®tre et retourne la cha√Æne "Bonjour le monde !".',
    
    # 11-20 : Sc√©narios de complexit√© moyenne
    "11. Cr√©e un fichier todo.txt avec trois lignes : - T√¢che 1, - T√¢che 2, - T√¢che 3. Ensuite, lis le contenu de ce fichier pour confirmer.",
    "12. Utilise une commande shell pour obtenir la date actuelle au format AAAA-MM-JJ. Ensuite, √©cris cette date dans un fichier nomm√© date_du_jour.txt.",
    "13. √âcris un script Python nomm√© calcul.py qui calcule 125 * 8 et affiche le r√©sultat. Ensuite, ex√©cute ce script et donne-moi la r√©ponse.",
    "14. Utilise une commande shell pour compter le nombre total de fichiers et de dossiers dans le r√©pertoire de travail et annonce le r√©sultat.",
    "15. Navigue sur la page d'accueil de Wikipedia (https://fr.wikipedia.org), extrais tout le texte, puis fournis un r√©sum√© concis de ce contenu.",
    '16. Cr√©e un fichier config.json avec le contenu {"user": "admin", "version": "2.1.0", "active": true}. Ensuite, lis ce fichier et dis-moi uniquement la valeur de la cl√© version.',
    "17. Cr√©e une arborescence de projet dans le workspace : un dossier parent nomm√© webapp, et √† l'int√©rieur, deux sous-dossiers : src et assets.",
    "18. Lis le fichier todo.txt. Si le fichier contient T√¢che 2, remplace cette ligne par - T√¢che 2 (Termin√©e). Sinon, ajoute une nouvelle ligne : - T√¢che 4.",
    "19. √âcris un script Python word_counter.py qui ouvre et lit le fichier projet_alpha.md, compte le nombre de mots, et affiche le total. Ex√©cute ensuite ce script.",
    "20. Ex√©cute la commande pnpm -v pour v√©rifier la version du gestionnaire de paquets dans l'environnement de d√©veloppement.",

    # 21-30 : D√©bogage et cr√©ation d'outils
    '21. Cr√©e un fichier bug.py avec le code suivant: print(hello). Ex√©cute-le. Tu devrais obtenir une NameError. Corrige le script pour qu\'il affiche correctement la cha√Æne de caract√®res "hello", puis ex√©cute-le √† nouveau.',
    '22. Analyse le contenu complet du r√©pertoire de travail. Cr√©e un fichier manifest.json qui liste tous les fichiers pr√©sents avec leur taille en octets. Le format doit √™tre un tableau d\'objets, par exemple [{"nom": "fichier1.txt", "taille": 123}].',
    "23. Je veux m'assurer que le code est propre. Ex√©cute la commande de linting du projet et rapporte la sortie compl√®te.",
    '24. Cr√©e un fichier A.txt avec "hello" et un fichier B.txt avec "world". Lis les deux fichiers et dis-moi s\'ils ont le m√™me contenu.',
    "25. Utilise la commande tar pour cr√©er une archive workspace.tar.gz de tout le contenu du r√©pertoire de travail.",
    "26. Cr√©e un outil nomm√© get-timestamp qui ne prend aucun param√®tre et retourne la date et l'heure actuelles au format ISO 8601. La fonction execute doit simplement contenir return new Date().toISOString();.",
    "27. J'ai besoin d'un outil pour g√©n√©rer des UUID. Cr√©e un outil nomm√© generate-uuid qui utilise la fonction crypto.randomUUID() de Node.js. Apr√®s sa cr√©ation, utilise-le imm√©diatement pour g√©n√©rer un UUID et l'afficher.",
    "28. Cr√©e un outil log-activity qui prend un param√®tre message. Cet outil doit utiliser writeFile pour ajouter le message pr√©c√©d√© d'un timestamp dans un fichier activity.log. Cr√©e cet outil.",
    "29. Lis le code de l'outil listFiles. Cr√©e une nouvelle version de cet outil nomm√©e listFiles-recursive qui utilise une commande shell (find . -print) pour lister les fichiers de mani√®re r√©cursive. Enregistre-le comme un nouvel outil.",
    '30. Je dois souvent v√©rifier si des sites web sont en ligne. Cr√©e un outil check-website-status qui prend une url en param√®tre. Cet outil doit utiliser Python et la librairie requests pour faire une requ√™te GET √† l\'URL et retourner "En ligne" si le code de statut est 200, et "Hors ligne" sinon. Cr√©e cet outil pour moi.',

    # 31-40 : Projets et d√©veloppement
    '31. Cr√©er un Site Web Statique "Portfolio"',
    '32. D√©velopper un Outil CLI Node pour G√©rer des T√¢ches',
    '33. Mettre en Place une API Web Minimale avec Javascript pnpm',
    '34. Cr√©er un Composant React pour l\'UI Existante',
    '35. Scraper des Donn√©es Cosmologique et les Analyser',
    '36. Cr√©er un Script d\'Initialisation de Projet',
    '37. Convertisseur Markdown vers HTML',
    '38. Cr√©er un Outil pour Interagir avec une API Publique',
    '39. G√©n√©rer et Ex√©cuter des Tests Unitaires pour un Script',
    '40. Refactoriser un Script pour la Clart√© et l\'Efficacit√©',

    # 41-50 : T√¢ches avanc√©es
    '41. Conteneuriser l\'API Express/Node avec un Dockerfile',
    '42. Cr√©er une Base de Donn√©es SQLite et l\'Int√©grer √† un Script',
    '43. D√©velopper une Application "Livre d\'Or" Full-Stack',
    '44. Automatiser des T√¢ches Bas√©es sur un Fichier YAML',
    '45. √âcrire un Script de "Benchmark" de Performance',
    '46. G√©n√©rer la Documentation Technique d\'un Projet',
    '47. Cr√©er un Workflow Git (Branches et Merge)',
    '48. Cr√©er une Micro-Librairie Typescript et l\'Utiliser',
    '49. R√©soudre un Probl√®me Logique en "Chain-of-Thought"',
    '50. Developpe les test les plus critique d une grosse Biblio comme Fastmcp',
]

def run_single_test(command_number_str: str):
    """
    Ex√©cute un test unique bas√© sur son num√©ro.
    """
    try:
        command_number = int(command_number_str)
        # Les num√©ros sont de 1 √† 50, mais les index de liste sont de 0 √† 49
        index = command_number - 1
        
        if not (0 <= index < len(PROMPTS)):
            print(f"‚ùå Erreur : Le num√©ro de commande '{command_number_str}' est invalide. "
                  f"Veuillez choisir un num√©ro entre 1 et {len(PROMPTS)}.")
            return
            
    except ValueError:
        print(f"‚ùå Erreur : Veuillez fournir un num√©ro de commande valide (ex: '1', '25').")
        return

    prompt_text = PROMPTS[index]
    print(f"‚ñ∂Ô∏è  Ex√©cution du test #{command_number}: {prompt_text[:70]}...")

    # --- √âtape 1: Envoyer la requ√™te POST initiale ---
    try:
        # Cr√©ation du corps de la requ√™te (payload)
        payload = json.dumps({"prompt": prompt_text, "llmModelName": "gemini-pro"})

        # Construction de la commande curl de mani√®re s√©curis√©e
        curl_command = [
            'curl', '-s', '-X', 'POST',
            '-H', 'Content-Type: application/json',
            '-H', f'Authorization: Bearer {API_TOKEN}',
            '-d', payload,
            f'{API_URL}/chat'
        ]
        
        print(f"   Commande: {' '.join(shlex.quote(c) for c in curl_command)}")

        # Ex√©cution de la commande
        process = subprocess.run(
            curl_command, 
            capture_output=True, 
            text=True, 
            encoding='utf-8',
            check=True
        )
        
        # Extraction de l'ID du job
        job_info = json.loads(process.stdout)
        job_id = job_info.get('jobId')

        if not job_id:
            print("‚ùå Erreur: L'ID du job (jobId) n'a pas √©t√© trouv√© dans la r√©ponse :")
            print(process.stdout)
            return

        print(f"‚úÖ Job d√©marr√© avec succ√®s. ID: {job_id}")

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'ex√©cution de la commande curl initiale.")
        print(f"   Code de retour: {e.returncode}")
        print(f"   Sortie standard (stdout): {e.stdout}")
        print(f"   Sortie d'erreur (stderr): {e.stderr}")
        return
    except json.JSONDecodeError:
        print(f"‚ùå Erreur: Impossible de d√©coder la r√©ponse JSON de la requ√™te initiale.")
        print(f"   R√©ponse re√ßue: {process.stdout}")
        return
    except Exception as e:
        print(f"‚ùå Une erreur inattendue est survenue lors de l'envoi du job : {e}")
        return

    # --- √âtape 2: Interroger (poll) le statut du job ---
    status_url = f"{API_URL}/status/{job_id}"
    print(f"üîÑ Interrogation du statut du job sur {status_url}")
    
    start_time = time.time()
    while time.time() - start_time < POLL_TIMEOUT:
        try:
            status_process = subprocess.run(
                ['curl', '-s', status_url],
                capture_output=True,
                text=True,
                encoding='utf-8',
                check=True
            )
            status_data = json.loads(status_process.stdout)
            job_state = status_data.get('state')
            
            print(f"   Statut actuel : {job_state}...")

            if job_state == 'completed':
                return_value = status_data.get('returnvalue', {})
                print("="*50)
                print(f"‚úÖ SUCC√àS : Le test #{command_number} est termin√©.")
                print(f"   R√©sultat final :")
                # Affiche le r√©sultat joliment format√©
                print(json.dumps(return_value, indent=2, ensure_ascii=False))
                print("="*50)
                return

            if job_state == 'failed':
                error_info = status_data.get('error', 'Aucune information d\'erreur fournie.')
                print("="*50)
                print(f"‚ùå √âCHEC : Le test #{command_number} a √©chou√©.")
                print(f"   Raison de l'√©chec : {error_info}")
                print("="*50)
                return

            time.sleep(POLL_INTERVAL)

        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de l'interrogation du statut du job : {e.stderr}")
            time.sleep(POLL_INTERVAL) # On attend avant de r√©essayer
        except json.JSONDecodeError:
            print(f"‚ùå Erreur: Impossible de d√©coder la r√©ponse JSON de l'API de statut.")
            print(f"   R√©ponse re√ßue : {status_process.stdout}")
            return
        except Exception as e:
            print(f"‚ùå Une erreur inattendue est survenue pendant l'interrogation : {e}")
            return
    
    # Si la boucle se termine sans r√©ponse
    print(f"‚è∞ TIMEOUT : Le test #{command_number} n'a pas abouti dans les {POLL_TIMEOUT} secondes imparties.")


if __name__ == "__main__":
    # Configure stdout pour utiliser l'encodage UTF-8, crucial pour Windows
    if sys.stdout.encoding != 'utf-8':
        sys.stdout.reconfigure(encoding='utf-8')

    if len(sys.argv) > 1:
        run_single_test(sys.argv[1])
    else:
        print("‚ÑπÔ∏è  Veuillez sp√©cifier un num√©ro de commande √† ex√©cuter.")
        print(f"   Exemple : python3 {sys.argv[0]} 1")