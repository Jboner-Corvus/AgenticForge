services:
  redis:
    image: redis:7.2-alpine
    container_name: g_forge_redis
    command: redis-server --port 6379
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -p 6379 ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - agentic_network

  postgres:
    image: postgres:16-alpine
    container_name: g_forge_postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gforge}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - agentic_network

  server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VITE_AUTH_TOKEN=${AUTH_TOKEN}
    container_name: g_forge_server
    ports:
      - "${PUBLIC_PORT:-8080}:3001"
    volumes:
      - ./workspace:/home/demon/agentforge/workspace
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment: &common_env
      - NODE_ENV=production
      - DOCKER=true
      - HOST=0.0.0.0
      - PUBLIC_PORT=${PUBLIC_PORT}
      - PORT=${PORT:-3001}
      - LOG_LEVEL=${LOG_LEVEL}
      - AUTH_TOKEN=${AUTH_TOKEN}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-gforge}
      - WEB_PORT=${WEB_PORT}
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL_NAME=${LLM_MODEL_NAME}
      - LLM_PROVIDER=${LLM_PROVIDER}
      - LLM_PROVIDER_HIERARCHY=${LLM_PROVIDER_HIERARCHY}
      - GEMINI_API_KEY=${LLM_API_KEY}
      - SESSION_PORT=${SESSION_PORT}
      - HOST_PROJECT_PATH=${HOST_PROJECT_PATH}
      - HOST_SYSTEM_PATH=/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - TOOLS_PATH=/usr/src/app/packages/core/dist/modules/tools/definitions
    mem_limit: ${CONTAINER_MEMORY_LIMIT:-2g}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 120s
    networks:
      - agentic_network

  

  

  web:
    build:
      context: .
      dockerfile: packages/ui/Dockerfile.web.nginx
      args:
        - VITE_AUTH_TOKEN=${AUTH_TOKEN}
    container_name: g_forge_web
    ports:
      - "${WEB_PORT}:3000"
    depends_on:
      server:
        condition: service_healthy
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-/}
      - AUTH_TOKEN=${AUTH_TOKEN}
      - VITE_AUTH_TOKEN=${AUTH_TOKEN}
    mem_limit: ${CONTAINER_MEMORY_LIMIT:-2g}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - agentic_network

  

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel_collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "13133:13133" # Health Check extension
      - "8888:8888" # Prometheus metrics
    depends_on:
      - redis
    networks:
      - agentic_network
    

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  agentic_network:
    driver: bridge
    name: g_forge_network
