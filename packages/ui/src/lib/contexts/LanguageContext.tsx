import { createContext } from 'react';

export type Language = 'fr' | 'en';

export type Translations = {
  agentReady: string;
  newSessionCreated: string;
  newSessionGenerated: string;
  sessionRetrieved: string;
  checkingServerHealth: string;
  serverStatus: string;
  serverOnline: string;
  serverOffline: string;
  serverHealthCheckFailed: string;
  tokenLoadedFromEnv: string;
  tokenLoadedFromLocalStorage: string;
  noTokenFound: string;
  interfaceInitialized: string;
  tokenSaved: string;
  newTokenSaved: string;
  tokenRemoved: string;
  tokenDeleted: string;
  historyCleared: string;
  debugLogCleared: string;
  sessionActive: string;
  sessionError: string;
  sessionUnknown: string;
  tokenValid: string;
  tokenRequired: string;
  settings: string;
  notifications: string;
  authToken: string;
  authTokenPlaceholder: string;
  saveToken: string;
  agentThinking: string;
  tokenRequiredInput: string;
  describeYourGoal: string;
  interrupt: string;
  sendMessage: string;
  controlPanel: string;
  agentStatus: string;
  sessionId: string;
  toolsDetected: string;
  connectionStatus: string;
  online: string;
  offline: string;
  agentCapabilities: string;
  sessionManagement: string;
  saveCurrentSession: string;
  noSessionsSaved: string;
  active: string;
  toolCreation: string;
  codeExecution: string;
  shellAccess: string;
  browserAccess: string;
  sandboxAccess: string;
  quickActions: string;
  newSession: string;
  clearHistory: string;
  debugLog: string;
  frontend: string;
  clear: string;
  hide: string;
  show: string;
  toolUsed: string;
  toolExecutedSuccessfully: string;
  llmConfiguration: string;
  llmProvider: string;
  selectLlmProvider: string;
  llmModel: string;
  selectLlmModel: string;
  llmApiKey: string;
  llmApiKeyPlaceholder: string;
  saveLlmSettings: string;
  llmSettingsSaved: string;
  login: string;
  email: string;
  password: string;
  separator: string;
  profile: string;
  typeYourMessage: string;
  llmApiKeyManagement: string;
  openAiApiKeyInput: string;
  addOpenAiApiKey: string;
  grokApiKeyInput: string;
  addGrokApiKey: string;
  kimika2ApiKeyInput: string;
  addKimika2ApiKey: string;
  deepseekApiKeyInput: string;
  addDeepseekApiKey: string;
  huggingFaceApiKeyInput: string;
  addHuggingFaceApiKey: string;
  mixtralApiKeyInput: string;
  addMixtralApiKey: string;
  ollamaApiKeyInput: string;
  addOllamaApiKey: string;
  lmStudioApiKeyInput: string;
  addLmStudioApiKey: string;
  yourApiKeys: string;
  noLlmApiKeysAdded: string;
  setAsActive: string;
  removeApiKey: string;
  toggleControlPanel: string;
  switchToLightMode: string;
  switchToDarkMode: string;
  toggleCanvas: string;
  toggleFullscreen: string;
  toggleHighContrastMode: string;
  chat: string;
  leaderboard: string;
  llmApiKeys: string;
  browserStatus: string;
  allowToolCreation: string;
  allowCodeExecution: string;
  saveCurrentSessionButton: string;
  sessionSaved: string;
  sessionLoaded: string;
  sessionDeleted: string;
  sessionRenamed: string;
  newSessionName: string;
  cancel: string;
  save: string;
  confirmDeletion: string;
  confirmDeleteSession: string;
  delete: string;
  copiedToClipboard: string;
  agentAvatar: string;
  ai: string;
  copyAgentResponse: string;
  agentContentWillAppearHere: string;
  agentHtmlOutput: string;
  agentUrlOutput: string;
  agentOutputCanvas: string;
  history: string;
}

export interface LanguageContextType {
  language: Language;
  translations: Translations;
  setLanguage: (lang: Language) => void;
}

export const LanguageContext = createContext<LanguageContextType | undefined>(undefined);