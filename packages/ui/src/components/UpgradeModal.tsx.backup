import { useState, useEffect, useCallback } from 'react';
import { 
  X, 
  ArrowUp, 
  AlertTriangle, 
  Info, 
  CheckCircle, 
  Download,
  Calendar,
  Clock,
  Settings,
  Shield,
  RefreshCw,
  ExternalLink,
  ChevronDown,
  ChevronUp
} from 'lucide-react';

interface UpdateInfo {
  hasUpdate: boolean;
  current: string;
  latest: string;
  comparison?: {
    current: string;
    latest: string;
    hasUpdate: boolean;
    severity: 'patch' | 'minor' | 'major';
    releaseNotes: string;
    releaseDate: string;
    downloadUrl: string;
    features: string[];
    bugFixes: string[];
    breakingChanges: string[];
  };
  error?: string;
}

interface UpgradeOptions {
  immediate: boolean;
  scheduledTime?: Date;
  backupEnabled: boolean;
  rollbackOnFailure: boolean;
  notifyOnCompletion: boolean;
}

interface UpgradeProgress {
  step: string;
  progress: number;
  logs: string[];
  currentOperation: string;
  estimatedTimeRemaining?: number;
  canCancel: boolean;
}

interface UpgradeModalProps {
  updateInfo: UpdateInfo;
  isOpen: boolean;
  onClose: () => void;
  onStartUpgrade: (options: UpgradeOptions) => Promise<void>;
  onCancelUpgrade?: () => void;
  upgradeProgress?: UpgradeProgress;
  isUpgrading?: boolean;
}

export function UpgradeModal({
  updateInfo,
  isOpen,
  onClose,
  onStartUpgrade,
  onCancelUpgrade,
  upgradeProgress,
  isUpgrading = false
}: UpgradeModalProps) {
  const [activeTab, setActiveTab] = useState<'overview' | 'release-notes' | 'options'>('overview');
  const [upgradeOptions, setUpgradeOptions] = useState<UpgradeOptions>({
    immediate: true,
    backupEnabled: true,
    rollbackOnFailure: true,
    notifyOnCompletion: true
  });
  const [scheduledDate, setScheduledDate] = useState('');
  const [scheduledTime, setScheduledTime] = useState('');
  const [showLogs, setShowLogs] = useState(false);
  const [isStarting, setIsStarting] = useState(false);

  const { comparison } = updateInfo;

  useEffect(() => {
    if (isOpen) {
      // Reset state when modal opens
      setActiveTab('overview');
      setIsStarting(false);
    }
  }, [isOpen]);

  const handleStartUpgrade = useCallback(async () => {
    setIsStarting(true);
    
    try {
      const options: UpgradeOptions = {
        ...upgradeOptions,
        scheduledTime: !upgradeOptions.immediate && scheduledDate && scheduledTime 
          ? new Date(`${scheduledDate}T${scheduledTime}`) 
          : undefined
      };
      
      await onStartUpgrade(options);
    } catch (error) {
      console.error('Failed to start upgrade:', error);
    } finally {
      setIsStarting(false);
    }
  }, [upgradeOptions, scheduledDate, scheduledTime, onStartUpgrade]);

  const getSeverityInfo = () => {
    if (!comparison) return null;
    
    switch (comparison.severity) {
      case 'major':
        return {
          color: 'text-red-500',
          bg: 'bg-red-500/10',
          border: 'border-red-500/20',
          icon: <AlertTriangle className="w-5 h-5" />,
          title: 'Major Update',
          description: 'This update includes significant changes and may have breaking changes.'
        };
      case 'minor':
        return {
          color: 'text-orange-500',
          bg: 'bg-orange-500/10',
          border: 'border-orange-500/20',
          icon: <ArrowUp className="w-5 h-5" />,
          title: 'Minor Update',
          description: 'This update includes new features and improvements.'
        };
      case 'patch':
        return {
          color: 'text-blue-500',
          bg: 'bg-blue-500/10',
          border: 'border-blue-500/20',
          icon: <CheckCircle className="w-5 h-5" />,
          title: 'Patch Update',
          description: 'This update includes bug fixes and minor improvements.'
        };
      default:
        return null;
    }
  };

  const formatReleaseNotes = (notes: string) => {
    return notes.split('\n').map((line, index) => {
      if (line.trim().startsWith('##')) {
        return <h3 key={index} className="font-semibold text-lg mt-4 mb-2">{line.replace('##', '').trim()}</h3>;
      }
      if (line.trim().startsWith('#')) {
        return <h2 key={index} className="font-bold text-xl mt-6 mb-3">{line.replace('#', '').trim()}</h2>;
      }
      if (line.trim().startsWith('- ') || line.trim().startsWith('* ')) {
        return (
          <li key={index} className="ml-4 text-sm text-muted-foreground">
            {line.replace(/^[\\-\\*]\\s*/, '').trim()}
          </li>
        );
      }
      if (line.trim()) {
        return <p key={index} className="text-sm text-muted-foreground mb-2">{line}</p>;
      }
      return <br key={index} />;
    });
  };

  const estimatedDuration = comparison?.severity === 'major' ? '10-15 minutes' : 
                           comparison?.severity === 'minor' ? '5-10 minutes' : '2-5 minutes';

  if (!isOpen || !comparison) {
    return null;
  }

  const severityInfo = getSeverityInfo();

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
      <div className="bg-background border border-border rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-border">
          <div className="flex items-center gap-3">
            {severityInfo?.icon && (
              <div className={severityInfo.color}>
                {severityInfo.icon}
              </div>
            )}
            <div>
              <h2 className="text-xl font-semibold">
                {isUpgrading ? 'Upgrading AgenticForge' : 'Update Available'}
              </h2>
              <p className="text-sm text-muted-foreground">
                v{updateInfo.current} â†’ v{updateInfo.latest}
              </p>
            </div>
          </div>
          
          {!isUpgrading && (
            <button
              onClick={onClose}
              className="p-2 hover:bg-background/50 rounded transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          )}
        </div>

        {/* Progress View (when upgrading) */}
        {isUpgrading && upgradeProgress && (
          <div className="p-6">
            <div className="space-y-4">
              {/* Progress Bar */}
              <div>
                <div className="flex justify-between text-sm mb-2">
                  <span>{upgradeProgress.currentOperation}</span>
                  <span>{Math.round(upgradeProgress.progress)}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${upgradeProgress.progress}%` }}
                  />
                </div>
              </div>

              {/* Current Step */}
              <div className="flex items-center gap-2 text-sm">
                <RefreshCw className="w-4 h-4 animate-spin" />
                <span>{upgradeProgress.step}</span>
                {upgradeProgress.estimatedTimeRemaining && (
                  <span className="text-muted-foreground ml-auto">
                    ~{Math.ceil(upgradeProgress.estimatedTimeRemaining / 60)} min remaining
                  </span>
                )}
              </div>

              {/* Logs */}
              <div>
                <button
                  onClick={() => setShowLogs(!showLogs)}
                  className="flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground"
                >
                  {showLogs ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
                  Show logs
                </button>
                
                {showLogs && (
                  <div className="mt-2 bg-black/10 rounded border max-h-32 overflow-y-auto">
                    <div className="p-3 font-mono text-xs space-y-1">
                      {upgradeProgress.logs.map((log, index) => (
                        <div key={index} className="text-muted-foreground">
                          {log}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              {/* Cancel Button */}
              {upgradeProgress.canCancel && onCancelUpgrade && (
                <div className="pt-4 border-t">
                  <button
                    onClick={onCancelUpgrade}
                    className="px-4 py-2 text-sm bg-red-600 hover:bg-red-700 text-white rounded transition-colors"
                  >
                    Cancel Upgrade
                  </button>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Main Content (when not upgrading) */}
        {!isUpgrading && (
          <>
            {/* Tabs */}
            <div className="flex border-b border-border">
              {[
                { id: 'overview', label: 'Overview', icon: Info },
                { id: 'release-notes', label: 'Release Notes', icon: ExternalLink },
                { id: 'options', label: 'Options', icon: Settings }
              ].map(({ id, label, icon: Icon }) => (
                <button
                  key={id}
                  onClick={() => setActiveTab(id as any)}
                  className={`flex items-center gap-2 px-4 py-3 text-sm font-medium border-b-2 transition-colors ${
                    activeTab === id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-muted-foreground hover:text-foreground'
                  }`}
                >
                  <Icon className="w-4 h-4" />
                  {label}
                </button>
              ))}
            </div>

            {/* Tab Content */}
            <div className="p-6 max-h-96 overflow-y-auto">
              {activeTab === 'overview' && (
                <div className="space-y-6">
                  {/* Severity Banner */}
                  {severityInfo && (
                    <div className={`p-4 rounded-lg border ${severityInfo.border} ${severityInfo.bg}`}>
                      <div className="flex items-start gap-3">
                        <div className={severityInfo.color}>
                          {severityInfo.icon}
                        </div>
                        <div>
                          <h3 className="font-semibold">{severityInfo.title}</h3>
                          <p className="text-sm text-muted-foreground mt-1">
                            {severityInfo.description}
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Release Info */}
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <div className="flex items-center gap-2 text-sm">
                        <Calendar className="w-4 h-4 text-muted-foreground" />
                        <span className="text-muted-foreground">Released:</span>
                        <span>{new Date(comparison.releaseDate).toLocaleDateString()}</span>
                      </div>
                      
                      <div className="flex items-center gap-2 text-sm">
                        <Clock className="w-4 h-4 text-muted-foreground" />
                        <span className="text-muted-foreground">Estimated time:</span>
                        <span>{estimatedDuration}</span>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center gap-2 text-sm">
                        <Download className="w-4 h-4 text-muted-foreground" />
                        <a 
                          href={comparison.downloadUrl}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-600 hover:text-blue-700 underline"
                        >
                          View on GitHub
                        </a>
                      </div>
                    </div>
                  </div>

                  {/* Changes Summary */}
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {comparison.features.length > 0 && (
                      <div className="p-3 bg-green-500/10 border border-green-500/20 rounded">
                        <div className="flex items-center gap-2 mb-2">
                          <CheckCircle className="w-4 h-4 text-green-500" />
                          <span className="text-sm font-medium">Features</span>
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {comparison.features.length} new feature{comparison.features.length !== 1 ? 's' : ''}
                        </div>
                      </div>
                    )}
                    
                    {comparison.bugFixes.length > 0 && (
                      <div className="p-3 bg-blue-500/10 border border-blue-500/20 rounded">
                        <div className="flex items-center gap-2 mb-2">
                          <Shield className="w-4 h-4 text-blue-500" />
                          <span className="text-sm font-medium">Bug Fixes</span>
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {comparison.bugFixes.length} issue{comparison.bugFixes.length !== 1 ? 's' : ''} resolved
                        </div>
                      </div>
                    )}
                    
                    {comparison.breakingChanges.length > 0 && (
                      <div className="p-3 bg-red-500/10 border border-red-500/20 rounded">
                        <div className="flex items-center gap-2 mb-2">
                          <AlertTriangle className="w-4 h-4 text-red-500" />
                          <span className="text-sm font-medium">Breaking Changes</span>
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {comparison.breakingChanges.length} breaking change{comparison.breakingChanges.length !== 1 ? 's' : ''}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {activeTab === 'release-notes' && (
                <div className="prose prose-sm max-w-none">
                  {comparison.releaseNotes ? (
                    <div className="space-y-2">
                      {formatReleaseNotes(comparison.releaseNotes)}
                    </div>
                  ) : (
                    <p className="text-muted-foreground">No release notes available.</p>
                  )}
                </div>
              )}

              {activeTab === 'options' && (
                <div className="space-y-6">
                  {/* Timing Options */}
                  <div>
                    <h3 className="font-semibold mb-3">When to upgrade</h3>
                    <div className="space-y-3">
                      <label className="flex items-center gap-3">
                        <input
                          type="radio"
                          name="timing"
                          checked={upgradeOptions.immediate}
                          onChange={() => setUpgradeOptions(prev => ({ ...prev, immediate: true }))}
                          className="w-4 h-4"
                        />
                        <span className="text-sm">Upgrade immediately</span>
                      </label>
                      
                      <label className="flex items-center gap-3">
                        <input
                          type="radio"
                          name="timing"
                          checked={!upgradeOptions.immediate}
                          onChange={() => setUpgradeOptions(prev => ({ ...prev, immediate: false }))}
                          className="w-4 h-4"
                        />
                        <span className="text-sm">Schedule for later</span>
                      </label>
                      
                      {!upgradeOptions.immediate && (
                        <div className="ml-7 grid grid-cols-2 gap-2">
                          <input
                            type="date"
                            value={scheduledDate}
                            onChange={(e) => setScheduledDate(e.target.value)}
                            min={new Date().toISOString().split('T')[0]}
                            className="px-3 py-2 text-sm border border-border rounded bg-background"
                          />
                          <input
                            type="time"
                            value={scheduledTime}
                            onChange={(e) => setScheduledTime(e.target.value)}
                            className="px-3 py-2 text-sm border border-border rounded bg-background"
                          />
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Safety Options */}
                  <div>
                    <h3 className="font-semibold mb-3">Safety options</h3>
                    <div className="space-y-3">
                      <label className="flex items-center gap-3">
                        <input
                          type="checkbox"
                          checked={upgradeOptions.backupEnabled}
                          onChange={(e) => setUpgradeOptions(prev => ({ 
                            ...prev, 
                            backupEnabled: e.target.checked 
                          }))}
                          className="w-4 h-4"
                        />
                        <span className="text-sm">Create backup before upgrade</span>
                      </label>
                      
                      <label className="flex items-center gap-3">
                        <input
                          type="checkbox"
                          checked={upgradeOptions.rollbackOnFailure}
                          onChange={(e) => setUpgradeOptions(prev => ({ 
                            ...prev, 
                            rollbackOnFailure: e.target.checked 
                          }))}
                          className="w-4 h-4"
                        />
                        <span className="text-sm">Automatically rollback on failure</span>
                      </label>
                      
                      <label className="flex items-center gap-3">
                        <input
                          type="checkbox"
                          checked={upgradeOptions.notifyOnCompletion}
                          onChange={(e) => setUpgradeOptions(prev => ({ 
                            ...prev, 
                            notifyOnCompletion: e.target.checked 
                          }))}
                          className="w-4 h-4"
                        />
                        <span className="text-sm">Notify when upgrade completes</span>
                      </label>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Footer */}
            <div className="flex items-center justify-between p-6 border-t border-border">
              <button
                onClick={onClose}
                className="px-4 py-2 text-sm text-muted-foreground hover:text-foreground border border-border rounded transition-colors"
              >
                Cancel
              </button>
              
              <div className="flex gap-2">
                {upgradeOptions.immediate ? (
                  <button
                    onClick={handleStartUpgrade}
                    disabled={isStarting}
                    className="px-4 py-2 text-sm bg-blue-600 hover:bg-blue-700 disabled:opacity-50 text-white rounded transition-colors flex items-center gap-2"
                  >
                    {isStarting ? (
                      <RefreshCw className="w-4 h-4 animate-spin" />
                    ) : (
                      <ArrowUp className="w-4 h-4" />
                    )}
                    {isStarting ? 'Starting...' : 'Upgrade Now'}
                  </button>
                ) : (
                  <button
                    onClick={handleStartUpgrade}
                    disabled={isStarting || !scheduledDate || !scheduledTime}
                    className="px-4 py-2 text-sm bg-blue-600 hover:bg-blue-700 disabled:opacity-50 text-white rounded transition-colors flex items-center gap-2"
                  >
                    <Calendar className="w-4 h-4" />
                    Schedule Upgrade
                  </button>
                )}
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
}

export default UpgradeModal;"