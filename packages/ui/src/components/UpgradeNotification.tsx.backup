import { useState, useEffect, useCallback } from 'react';
import { X, ArrowUp, AlertTriangle, Info, CheckCircle } from 'lucide-react';

interface UpdateInfo {
  hasUpdate: boolean;
  current: string;
  latest: string;
  comparison?: {
    current: string;
    latest: string;
    hasUpdate: boolean;
    severity: 'patch' | 'minor' | 'major';
    releaseNotes: string;
    releaseDate: string;
    downloadUrl: string;
    features: string[];
    bugFixes: string[];
    breakingChanges: string[];
  };
  error?: string;
}

interface UpgradeNotificationProps {
  updateInfo: UpdateInfo;
  onUpgrade: (updateInfo: UpdateInfo) => void;
  onDismiss: () => void;
  onRemindLater: (duration: 'day' | 'week' | 'month') => void;
  onSkipVersion: () => void;
  position?: 'top' | 'center' | 'bottom';
  autoHide?: boolean;
  autoHideDelay?: number;
}

export function UpgradeNotification({
  updateInfo,
  onUpgrade,
  onDismiss,
  onRemindLater,
  onSkipVersion,
  position = 'top',
  autoHide = false,
  autoHideDelay = 10000
}: UpgradeNotificationProps) {
  const [isVisible, setIsVisible] = useState(true);
  const [showOptions, setShowOptions] = useState(false);
  const [timeLeft, setTimeLeft] = useState(autoHideDelay / 1000);

  const { comparison } = updateInfo;
  
  // Auto-hide countdown
  useEffect(() => {
    if (!autoHide || !isVisible) return;
    
    const interval = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          setIsVisible(false);
          setTimeout(onDismiss, 300); // Wait for animation
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    
    return () => clearInterval(interval);
  }, [autoHide, isVisible, onDismiss]);

  const handleDismiss = useCallback(() => {
    setIsVisible(false);
    setTimeout(onDismiss, 300);
  }, [onDismiss]);

  const handleUpgrade = useCallback(() => {
    onUpgrade(updateInfo);
  }, [onUpgrade, updateInfo]);

  const handleRemindLater = useCallback((duration: 'day' | 'week' | 'month') => {
    onRemindLater(duration);
    handleDismiss();
  }, [onRemindLater, handleDismiss]);

  const handleSkipVersion = useCallback(() => {
    onSkipVersion();
    handleDismiss();
  }, [onSkipVersion, handleDismiss]);

  if (!updateInfo.hasUpdate || !comparison) {
    return null;
  }

  const getSeverityStyles = () => {
    switch (comparison.severity) {
      case 'major':
        return {
          border: 'border-red-500/50',
          bg: 'bg-red-500/10',
          icon: <AlertTriangle className="w-5 h-5 text-red-500" />,
          badge: 'bg-red-500 text-white',
          button: 'bg-red-600 hover:bg-red-700 text-white'
        };
      case 'minor':
        return {
          border: 'border-orange-500/50',
          bg: 'bg-orange-500/10',
          icon: <ArrowUp className="w-5 h-5 text-orange-500" />,
          badge: 'bg-orange-500 text-white',
          button: 'bg-orange-600 hover:bg-orange-700 text-white'
        };
      case 'patch':
        return {
          border: 'border-blue-500/50',
          bg: 'bg-blue-500/10',
          icon: <CheckCircle className="w-5 h-5 text-blue-500" />,
          badge: 'bg-blue-500 text-white',
          button: 'bg-blue-600 hover:bg-blue-700 text-white'
        };
      default:
        return {
          border: 'border-gray-500/50',
          bg: 'bg-gray-500/10',
          icon: <Info className="w-5 h-5 text-gray-500" />,
          badge: 'bg-gray-500 text-white',
          button: 'bg-gray-600 hover:bg-gray-700 text-white'
        };
    }
  };

  const getPositionClasses = () => {
    switch (position) {
      case 'top':
        return 'top-4 left-1/2 transform -translate-x-1/2';
      case 'center':
        return 'top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2';
      case 'bottom':
        return 'bottom-4 left-1/2 transform -translate-x-1/2';
      default:
        return 'top-4 left-1/2 transform -translate-x-1/2';
    }
  };

  const styles = getSeverityStyles();
  const releaseDate = new Date(comparison.releaseDate).toLocaleDateString();

  return (
    <div className={`fixed ${getPositionClasses()} z-50 transition-all duration-300 ${
      isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 -translate-y-4'
    }`}>
      <div className={`max-w-md mx-auto bg-background/95 backdrop-blur-sm border ${styles.border} ${styles.bg} rounded-lg shadow-lg p-4`}>
        {/* Header */}
        <div className="flex items-start justify-between mb-3">
          <div className="flex items-center gap-3">
            {styles.icon}
            <div>
              <div className="flex items-center gap-2">
                <h3 className="font-semibold text-sm">
                  Update Available
                </h3>
                <span className={`px-2 py-0.5 text-xs font-medium rounded-full ${styles.badge}`}>
                  {comparison.severity.toUpperCase()}
                </span>
              </div>
              <p className="text-xs text-muted-foreground mt-1">
                v{updateInfo.current} â†’ v{updateInfo.latest}
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-1">
            {autoHide && timeLeft > 0 && (
              <span className="text-xs text-muted-foreground">
                {timeLeft}s
              </span>
            )}
            <button
              onClick={handleDismiss}
              className="p-1 hover:bg-background/50 rounded transition-colors"
              title="Dismiss"
            >
              <X className="w-4 h-4 text-muted-foreground" />
            </button>
          </div>
        </div>

        {/* Release Summary */}
        <div className="mb-4 space-y-2">
          <p className="text-sm text-muted-foreground">
            Released on {releaseDate}
          </p>
          
          {comparison.features.length > 0 && (
            <div className="flex items-center gap-2 text-xs">
              <CheckCircle className="w-3 h-3 text-green-500" />
              <span>{comparison.features.length} new feature{comparison.features.length !== 1 ? 's' : ''}</span>
            </div>
          )}
          
          {comparison.bugFixes.length > 0 && (
            <div className="flex items-center gap-2 text-xs">
              <CheckCircle className="w-3 h-3 text-blue-500" />
              <span>{comparison.bugFixes.length} bug fix{comparison.bugFixes.length !== 1 ? 'es' : ''}</span>
            </div>
          )}
          
          {comparison.breakingChanges.length > 0 && (
            <div className="flex items-center gap-2 text-xs">
              <AlertTriangle className="w-3 h-3 text-red-500" />
              <span>{comparison.breakingChanges.length} breaking change{comparison.breakingChanges.length !== 1 ? 's' : ''}</span>
            </div>
          )}
        </div>

        {/* Action Buttons */}
        <div className="flex items-center gap-2">
          <button
            onClick={handleUpgrade}
            className={`px-3 py-1.5 text-sm font-medium rounded transition-colors ${styles.button}`}
          >
            Upgrade Now
          </button>
          
          <button
            onClick={() => setShowOptions(!showOptions)}
            className="px-3 py-1.5 text-sm font-medium text-muted-foreground hover:text-foreground border border-border rounded transition-colors"
          >
            Options
          </button>
        </div>

        {/* Extended Options */}
        {showOptions && (
          <div className="mt-3 pt-3 border-t border-border space-y-2">
            <div className="text-xs text-muted-foreground mb-2">
              Remind me later:
            </div>
            <div className="flex gap-2 text-xs">
              <button
                onClick={() => handleRemindLater('day')}
                className="px-2 py-1 bg-background/50 hover:bg-background/70 border border-border rounded transition-colors"
              >
                1 Day
              </button>
              <button
                onClick={() => handleRemindLater('week')}
                className="px-2 py-1 bg-background/50 hover:bg-background/70 border border-border rounded transition-colors"
              >
                1 Week
              </button>
              <button
                onClick={() => handleRemindLater('month')}
                className="px-2 py-1 bg-background/50 hover:bg-background/70 border border-border rounded transition-colors"
              >
                1 Month
              </button>
            </div>
            
            <button
              onClick={handleSkipVersion}
              className="w-full mt-2 px-2 py-1 text-xs text-muted-foreground hover:text-foreground bg-background/30 hover:bg-background/50 border border-border rounded transition-colors"
            >
              Skip this version
            </button>
          </div>
        )}
      </div>
    </div>
  );
}

export default UpgradeNotification;", "original_text": "", "replace_all": false}]