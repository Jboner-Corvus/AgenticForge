{"version":3,"file":"summarize.tool.js","sourceRoot":"","sources":["summarize.tool.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAKxB,OAAO,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AACzE,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAE5D,gDAAgD;AAChD,MAAM,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC;IAChC,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,uBAAuB,CAAC;CACnD,CAAC,CAAC;AAEH,wEAAwE;AACxE,MAAM,CAAC,MAAM,aAAa,GAAS;IACjC,IAAI,EAAE,cAAc;IACpB,WAAW,EAAE,0BAA0B;IACvC,UAAU,EAAE,gBAAgB;IAC5B,OAAO,EAAE,KAAK,EAAE,IAAS,EAAE,GAAQ,EAAE,EAAE;QACrC,MAAM,MAAM,GAAG,IAAwC,CAAC;QACxD,uFAAuF;QACvF,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;QAE9C,mEAAmE;QACnE,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC;YAClC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE;SACtE,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport type { Tool } from '../../types.js';\nimport logger from '../../logger.js';\n\nimport { getSummarizerPrompt } from '../../prompts/summarizer.prompt.js';\nimport { getLlmResponse } from '../../utils/llmProvider.js';\n\n// 1. Définir le schéma des paramètres avec Zod.\nconst parametersSchema = z.object({\n  text: z.string().describe('The text to summarize'),\n});\n\n// 2. Définir l'outil en utilisant le type générique Tool<typeof schema>\nexport const summarizeTool: Tool = {\n  name: 'ai_summarize',\n  description: 'Summarizes a given text.',\n  parameters: parametersSchema,\n  execute: async (args: any, ctx: any) => {\n    const params = args as z.infer<typeof parametersSchema>;\n    // La session est accessible via ctx.session, contenant l'historique et autres données.\n    ctx.log.info(params.text, 'Summarizing text');\n\n    // Le type de 'args' est inféré depuis le schéma : { text: string }\n    const result = await getLlmResponse([\n      { parts: [{ text: getSummarizerPrompt(params.text) }], role: 'user' },\n    ]);\n\n    return result;\n  },\n};\n"]}