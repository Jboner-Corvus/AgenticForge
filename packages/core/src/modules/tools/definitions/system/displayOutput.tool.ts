// Define the input schema for the displayOutput toolconst displayOutputSchema = z.object({  type: z.enum(['html', 'markdown', 'url', 'text']).describe('The type of content to display (html, markdown, url, or text).'),  content: z.string().describe('The content to display. This can be HTML string, Markdown string, a URL, or plain text.'),});// Define the displayOutput toolexport const displayOutputTool: Tool<typeof displayOutputSchema> = {  name: 'displayOutput',  description: 'Displays content (HTML, Markdown, URL, or plain text) in a dedicated output canvas in the user interface.',  schema: displayOutputSchema,  examples: [    {      input: {        type: 'html',        content: '<h1>Hello World!</h1><p>This is some HTML content.</p>',      },      output: 'Content sent to display canvas.',    },    {      input: {        type: 'markdown',        content: '# Markdown Example\n\nThis is **bold** and *italic* text.',      },      output: 'Content sent to display canvas.',    },    {      input: {        type: 'url',        content: 'https://www.example.com',      },      output: 'Content sent to display canvas.',    },    {      input: {        type: 'text',        content: 'This is plain text.\nIt preserves newlines.',      },      output: 'Content sent to display canvas.',    },  ],  execute: async (input, ctx) => {    // Use the streamContent method from the context to send data to the frontend    await ctx.streamContent({      type: 'displayOutput', // A custom type to identify this event on the frontend      payload: input, // The input to the tool becomes the payload    });    return 'Content sent to display canvas.';  },};
