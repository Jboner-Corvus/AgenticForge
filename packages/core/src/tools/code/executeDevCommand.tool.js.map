{"version":3,"file":"executeDevCommand.tool.js","sourceRoot":"","sources":["executeDevCommand.tool.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAIxB,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAC;AAE1D,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,CAAC,2CAA2C;AAEvF,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,CAAC,MAAM,CAAC;IAC9C,OAAO,EAAE,CAAC;SACP,MAAM,EAAE;SACR,QAAQ,CACP,qEAAqE,CACtE;CACJ,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,qBAAqB,GAAyC;IACzE,WAAW,EACT,iFAAiF;IACnF,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,GAAyB,EAAE,EAAE;QACjD,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,sCAAsC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACpE,IAAI,CAAC;YACH,gFAAgF;YAChF,kCAAkC;YAClC,MAAM,WAAW,GAAG,0BAA0B,IAAI,CAAC,OAAO,EAAE,CAAC;YAC7D,MAAM,MAAM,GAAG,MAAM,YAAY,CAC/B,iBAAiB,EACjB,CAAC,IAAI,EAAE,IAAI,EAAE,WAAW,CAAC,EACzB;gBACE,MAAM,EAAE;oBACN;wBACE,MAAM,EAAE,MAAM,CAAC,iBAAiB,IAAI,OAAO,CAAC,GAAG,EAAE;wBACjD,MAAM,EAAE,cAAc;wBACtB,IAAI,EAAE,MAAM;qBACb;iBACF;gBACD,UAAU,EAAE,cAAc;aAC3B,CACF,CAAC;YAEF,IAAI,MAAM,GAAG,cAAc,MAAM,CAAC,QAAQ,IAAI,CAAC;YAC/C,IAAI,MAAM,CAAC,MAAM;gBAAE,MAAM,IAAI,mBAAmB,MAAM,CAAC,MAAM,IAAI,CAAC;YAClE,IAAI,MAAM,CAAC,MAAM;gBAAE,MAAM,IAAI,mBAAmB,MAAM,CAAC,MAAM,IAAI,CAAC;YAClE,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;YACxC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,sCAAsC,EAAE;gBACpD,OAAO,EAAE,UAAU,CAAC,OAAO;gBAC3B,IAAI,EAAE,UAAU,CAAC,IAAI;gBACrB,KAAK,EAAE,UAAU,CAAC,KAAK;aACxB,CAAC,CAAC;YACH,OAAO,yCAAyC,UAAU,CAAC,OAAO,EAAE,CAAC;QACvE,CAAC;IACH,CAAC;IACD,IAAI,EAAE,mBAAmB;IACzB,UAAU,EAAE,uBAAuB;CACpC,CAAC","sourcesContent":["import { Context } from 'fastmcp';\nimport { z } from 'zod';\n\nimport type { SessionData, Tool } from '../../types.js';\n\nimport { config } from '../../config.js';\nimport { runInSandbox } from '../../utils/dockerManager.js';\nimport { getErrDetails } from '../../utils/errorUtils.js';\n\nconst DEV_SANDBOX_IMAGE = 'node:24-alpine'; // CORRECTION: Passage de node:20 à node:24\n\nexport const executeDevCommandParams = z.object({\n  command: z\n    .string()\n    .describe(\n      'The shell command to execute (e.g., \"pnpm install\", \"tsc --noEmit\")',\n    ),\n});\n\nexport const executeDevCommandTool: Tool<typeof executeDevCommandParams> = {\n  description:\n    'Executes shell commands within a secure sandbox that includes Node.js and pnpm.',\n  execute: async (args, ctx: Context<SessionData>) => {\n    ctx.log.info(`Executing dev command in sandbox: \"${args.command}\"`);\n    try {\n      // Envelopper la commande dans \"sh -c\" pour une exécution correcte dans le shell\n      // et installer pnpm au préalable.\n      const fullCommand = `npm install -g pnpm && ${args.command}`;\n      const result = await runInSandbox(\n        DEV_SANDBOX_IMAGE,\n        ['sh', '-c', fullCommand],\n        {\n          mounts: [\n            {\n              Source: config.HOST_PROJECT_PATH || process.cwd(),\n              Target: '/usr/src/app',\n              Type: 'bind',\n            },\n          ],\n          workingDir: '/usr/src/app',\n        },\n      );\n\n      let output = `Exit Code: ${result.exitCode}\\n`;\n      if (result.stdout) output += `--- STDOUT ---\\n${result.stdout}\\n`;\n      if (result.stderr) output += `--- STDERR ---\\n${result.stderr}\\n`;\n      return output;\n    } catch (error) {\n      const errDetails = getErrDetails(error);\n      ctx.log.error('Dev command sandbox execution failed', {\n        message: errDetails.message,\n        name: errDetails.name,\n        stack: errDetails.stack,\n      });\n      return `Error: Failed to execute dev command. ${errDetails.message}`;\n    }\n  },\n  name: 'executeDevCommand',\n  parameters: executeDevCommandParams,\n};\n"]}