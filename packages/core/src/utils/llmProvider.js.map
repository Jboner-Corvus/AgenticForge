{"version":3,"file":"llmProvider.js","sourceRoot":"","sources":["llmProvider.ts"],"names":[],"mappings":"AAAA,yDAAyD;AAEzD,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AACtC,OAAO,MAAM,MAAM,cAAc,CAAC;AAOlC,MAAM,CAAC,KAAK,UAAU,cAAc,CAClC,QAAyB,EACzB,YAAqB;IAErB,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;IAEpD,MAAM,MAAM,GAAG,uDAAuD,MAAM,CAAC,cAAc,wBAAwB,MAAM,CAAC,WAAW,EAAE,CAAC;IAExI,MAAM,QAAQ,GAAoB,EAAE,CAAC;IACrC,IAAI,YAAY,EAAE,CAAC;QACjB,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IACnE,CAAC;IACD,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;IAE3B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IAE1C,IAAI,CAAC;QACH,GAAG,CAAC,KAAK,CACP,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,cAAc,EAAE,EACxC,yCAAyC,CAC1C,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,MAAM,EAAE;YACnC,IAAI;YACJ,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;YAC/C,MAAM,EAAE,MAAM;SACf,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxC,GAAG,CAAC,KAAK,CACP,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,EACtC,2BAA2B,CAC5B,CAAC;YACF,MAAM,IAAI,KAAK,CACb,yCAAyC,QAAQ,CAAC,MAAM,KAAK,SAAS,EAAE,CACzE,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAEnC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;QAChE,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,GAAG,CAAC,KAAK,CACP,EAAE,QAAQ,EAAE,IAAI,EAAE,EAClB,4CAA4C,CAC7C,CAAC;YACF,OAAO,mKAAmK,CAAC;QAC7K,CAAC;QACD,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,iCAAiC,CAAC,CAAC;QAC7D,OAAO,4GAA4G,CAAC;IACtH,CAAC;AACH,CAAC","sourcesContent":["// src/utils/llmProvider.ts (version corrig√©e et robuste)\n\nimport { config } from '../config.js';\nimport logger from '../logger.js';\n\ninterface GeminiContent {\n  parts: { text: string }[];\n  role: 'model' | 'user';\n}\n\nexport async function getLlmResponse(\n  messages: GeminiContent[],\n  systemPrompt?: string,\n): Promise<string> {\n  const log = logger.child({ module: 'LLMProvider' });\n\n  const apiUrl = `https://generativelanguage.googleapis.com/v1/models/${config.LLM_MODEL_NAME}:generateContent?key=${config.LLM_API_KEY}`;\n\n  const contents: GeminiContent[] = [];\n  if (systemPrompt) {\n    contents.push({ parts: [{ text: systemPrompt }], role: 'user' });\n  }\n  contents.push(...messages);\n\n  const body = JSON.stringify({ contents });\n\n  try {\n    log.debug(\n      { apiUrl, model: config.LLM_MODEL_NAME },\n      'Sending request to Google Gemini API v1',\n    );\n\n    const response = await fetch(apiUrl, {\n      body,\n      headers: { 'Content-Type': 'application/json' },\n      method: 'POST',\n    });\n\n    if (!response.ok) {\n      const errorBody = await response.text();\n      log.error(\n        { errorBody, status: response.status },\n        'Gemini API request failed',\n      );\n      throw new Error(\n        `Gemini API request failed with status ${response.status}: ${errorBody}`,\n      );\n    }\n\n    const data = await response.json();\n\n    const content = data.candidates?.[0]?.content?.parts?.[0]?.text;\n    if (!content) {\n      log.error(\n        { response: data },\n        'Invalid response structure from Gemini API',\n      );\n      return `<tool_code>{\"tool\": \"error\", \"parameters\": {\"message\": \"Invalid response structure from Gemini API. The model may have returned an empty response.\"}}</tool_code>`;\n    }\n    return content.trim();\n  } catch (error) {\n    log.error({ err: error }, 'Failed to get response from LLM');\n    return `<tool_code>{\"tool\": \"error\", \"parameters\": {\"message\": \"Failed to communicate with the LLM.\"}}</tool_code>`;\n  }\n}\n"]}