{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  Context as FastMCPContext,\n} from 'fastmcp';\nimport { z, ZodObject, ZodRawShape, ZodTypeAny } from 'zod';\n\nimport { Queue } from 'bullmq';\n\nexport interface AgentSession {\n  data: SessionData;\n  id: string;\n}\n\nexport interface SessionData {\n  [key: string]: any;\n  history: Message[];\n  id: string;\n  identities: Array<{ id: string; type: string }>;\n}\n\nexport type Ctx = FastMCPContext<SessionData>;\n\nexport interface Message {\n  content: string;\n  role: 'model' | 'tool' | 'user';\n}\n\nexport interface Tool<T extends ZodObject<ZodRawShape> = ZodObject<ZodRawShape>, U extends ZodTypeAny = ZodTypeAny> {\n  name: string;\n  description: string;\n  parameters: T;\n  output?: U;\n  execute: (args: z.infer<T>, context: Ctx) => Promise<z.infer<U> | string | void>;\n}\n"]}