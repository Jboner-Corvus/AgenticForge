{"version":3,"file":"webServer.js","sourceRoot":"","sources":["webServer.ts"],"names":[],"mappings":"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","sourcesContent":["import cookieParser from 'cookie-parser';\nimport express from 'express';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { config } from './config.js';\nimport logger from './logger.js';\nimport { jobQueue } from './queue.js';\nimport { redis } from './redisClient.js';\nimport { AppError, handleError } from './utils/errorUtils.js';\nimport { getTools } from './utils/toolLoader.js';\nimport { validateApiKey, validateWebhook } from './utils/validationUtils.js';\nimport { sendWebhook } from './utils/webhookUtils.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport async function startWebServer() {\n  const app = express();\n  app.use(express.json());\n  app.use(express.static(path.join(__dirname, '..', 'ui', 'dist')));\n  app.use(cookieParser());\n\n  app.use((req: express.Request, res: express.Response, next: express.NextFunction) => {\n    let sessionId = req.cookies.agenticforge_session_id;\n\n    if (!sessionId) {\n      sessionId = uuidv4();\n      res.cookie('agenticforge_session_id', sessionId, {\n        httpOnly: true,\n        maxAge: 7 * 24 * 60 * 60 * 1000,\n        sameSite: 'lax',\n        secure: process.env.NODE_ENV === 'production',\n      });\n    }\n    (req as any).sessionId = sessionId;\n    next();\n  });\n\n  app.get('/api/health', (req: express.Request, res: express.Response) => {\n    res.status(200).send('OK');\n  });\n\n  app.get('/api/tools', async (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    try {\n      const tools = await getTools();\n      res.status(200).json(tools);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post('/api/chat', async (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    try {\n      const { prompt } = req.body;\n      const sessionId = (req as any).sessionId;\n\n      if (!prompt) {\n        throw new AppError('Le prompt est manquant.', 400);\n      }\n\n      logger.info({ prompt, sessionId }, 'Nouveau message reçu');\n\n      // For SSE, we'll add the job and then immediately return a 200 OK\n      // The actual streaming will happen on a separate endpoint or via a different mechanism\n      // For now, we'll keep the existing job queueing logic.\n      const job = await jobQueue.add('process-message', {\n        prompt,\n        sessionId,\n      });\n\n      res.status(202).json({\n        jobId: job.id,\n        message: 'Requête reçue, traitement en cours.',\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get('/api/chat/stream/:jobId', async (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    const { jobId } = req.params;\n    const sessionId = (req as any).sessionId;\n\n    res.writeHead(200, {\n      'Cache-Control': 'no-cache',\n      Connection: 'keep-alive',\n      'Content-Type': 'text/event-stream',\n    });\n\n    const subscriber = redis.duplicate();\n    const channel = `job:${jobId}:events`;\n\n    await subscriber.subscribe(channel);\n    logger.info(`Subscribed to ${channel} for SSE.`);\n\n    subscriber.on('message', (channel: string, message: string) => {\n      logger.info({ channel, message }, 'Received message from Redis channel');\n      res.write(`data: ${message}\\n\\n`);\n    });\n\n    req.on('close', () => {\n      logger.info(\n        `Client disconnected from SSE for job ${jobId}. Unsubscribing.`,\n      );\n      subscriber.unsubscribe(channel);\n      subscriber.quit();\n    });\n\n    // Send a heartbeat to keep the connection alive\n    const heartbeatInterval = setInterval(() => {\n      res.write(':heartbeat\\n\\n');\n    }, 15000);\n\n    req.on('close', () => {\n      clearInterval(heartbeatInterval);\n    });\n  });\n\n  app.get('/api/history', async (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    try {\n      const sessionId = (req as any).sessionId;\n      const historyKey = `session:${sessionId}:history`;\n      const storedHistory = await redis.get(historyKey);\n      const history = storedHistory ? JSON.parse(storedHistory) : [];\n      res.status(200).json(history);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post('/api/session', (req: express.Request, res: express.Response) => {\n    const sessionId = (req as any).sessionId;\n    logger.info(\n      { sessionId },\n      'Session implicitement créée/récupérée via cookie.',\n    );\n    res.status(200).json({\n      message: 'Session gérée automatiquement via cookie.',\n      sessionId,\n    });\n  });\n\n  app.get('/api/memory', async (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    try {\n      const workspaceDir = path.resolve(process.cwd(), 'workspace');\n      const files = await fs.promises.readdir(workspaceDir);\n      const memoryContents = await Promise.all(\n        files.map(async (file) => {\n          const content = await fs.promises.readFile(\n            path.join(workspaceDir, file),\n            'utf-8',\n          );\n          return { content, fileName: file };\n        }),\n      );\n      res.status(200).json(memoryContents);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post('/api/interrupt/:jobId', async (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    try {\n      const { jobId } = req.params;\n      const job = await jobQueue.getJob(jobId);\n\n      if (!job) {\n        throw new AppError('Job non trouvé.', 404);\n      }\n\n      // A simple way to interrupt is to publish a message on a specific channel\n      // that the worker is listening to. The worker can then gracefully stop.\n      await redis.publish(`job:${jobId}:interrupt`, 'interrupt');\n\n      res.status(200).json({ message: 'Interruption signal sent.' });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get('/api/status/:jobId', async (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    try {\n      const { jobId } = req.params;\n      const job = await jobQueue.getJob(jobId);\n\n      if (!job) {\n        throw new AppError('Job non trouvé.', 404);\n      }\n\n      const state = await job.getState();\n      const progress = job.progress;\n      const returnvalue = job.returnvalue;\n\n      res.status(200).json({ jobId, progress, returnvalue, state });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.use(handleError);\n\n  app.listen(config.PORT, () => {\n    logger.info(\n      `Serveur AgenticForge (mode scalable) démarré sur http://localhost:${config.PORT}`,\n    );\n  });\n}\n"]}