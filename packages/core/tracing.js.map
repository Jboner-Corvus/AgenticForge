{"version":3,"file":"tracing.js","sourceRoot":"","sources":["tracing.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,2BAA2B,EAAE,MAAM,2CAA2C,CAAC;AACxF,OAAO,EAAE,kBAAkB,EAAE,MAAM,2CAA2C,CAAC;AAC/E,OAAO,EAAE,iBAAiB,EAAE,MAAM,yCAAyC,CAAC;AAC5E,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAClE,OAAO,EAAE,6BAA6B,EAAE,MAAM,4BAA4B,CAAC;AAC3E,OAAO,EAAE,OAAO,EAAE,MAAM,yBAAyB,CAAC;AAClD,OAAO,EAAE,0BAA0B,EAAE,MAAM,qCAAqC,CAAC;AAEjF,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,eAAe,CAAC;AACrE,MAAM,iBAAiB,GACrB,OAAO,CAAC,GAAG,CAAC,uBAAuB,IAAI,4BAA4B,CAAC;AAEtE,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC;IACtB,gBAAgB,EAAE,CAAC,2BAA2B,EAAE,CAAC;IACjD,YAAY,EAAE,IAAI,6BAA6B,CAAC;QAC9C,QAAQ,EAAE,IAAI,kBAAkB,CAAC;YAC/B,GAAG,EAAE,iBAAiB;SACvB,CAAC;KACH,CAAC;IACF,QAAQ,EAAE,sBAAsB,CAAC;QAC/B,CAAC,0BAA0B,CAAC,YAAY,CAAC,EAAE,WAAW;KACvD,CAAC;IACF,aAAa,EAAE,IAAI,iBAAiB,CAAC;QACnC,GAAG,EAAE,iBAAiB;KACvB,CAAC;CACH,CAAC,CAAC;AAEH,GAAG,CAAC,KAAK,EAAE,CAAC;AACZ,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;AAE9C,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;IACzB,GAAG;SACA,QAAQ,EAAE;SACV,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;SAC7C,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;SACjE,OAAO,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC","sourcesContent":["import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport { OTLPMetricExporter } from '@opentelemetry/exporter-metrics-otlp-grpc';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-grpc';\nimport { resourceFromAttributes } from '@opentelemetry/resources';\nimport { PeriodicExportingMetricReader } from '@opentelemetry/sdk-metrics';\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\n\nconst serviceName = process.env.OTEL_SERVICE_NAME || 'agentic-forge';\nconst collectorEndpoint =\n  process.env.OTEL_COLLECTOR_ENDPOINT || 'http://otel-collector:4317';\n\nconst sdk = new NodeSDK({\n  instrumentations: [getNodeAutoInstrumentations()],\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new OTLPMetricExporter({\n      url: collectorEndpoint,\n    }),\n  }),\n  resource: resourceFromAttributes({\n    [SemanticResourceAttributes.SERVICE_NAME]: serviceName,\n  }),\n  traceExporter: new OTLPTraceExporter({\n    url: collectorEndpoint,\n  }),\n});\n\nsdk.start();\nconsole.log('OpenTelemetry SDK initialized.');\n\nprocess.on('SIGTERM', () => {\n  sdk\n    .shutdown()\n    .then(() => console.log('Tracing terminated'))\n    .catch((error) => console.log('Error terminating tracing', error))\n    .finally(() => process.exit(0));\n});\n"]}